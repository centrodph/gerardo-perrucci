"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[219],{3230:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"machine-learning/machine-learning-process","metadata":{"permalink":"/gerardo-perrucci/blog/machine-learning/machine-learning-process","source":"@site/blog/machine-learning/2024-05-27-machine-learning-process.md","title":"Machine Learning Process: A Comprehensive Guide","description":"Machine learning (ML) has become a cornerstone of modern technology, driving advancements in various fields such as healthcare, finance, and transportation. To build effective ML models, it\'s essential to understand the three main steps in the machine learning process: Data Preprocessing, Modeling, and Evaluation. This article breaks down these steps, detailing the sub-steps involved and providing references for further reading and understanding.","date":"2024-05-27T00:00:00.000Z","tags":[{"label":"Machine Learning","permalink":"/gerardo-perrucci/blog/tags/machine-learning"},{"label":"Data Preprocessing","permalink":"/gerardo-perrucci/blog/tags/data-preprocessing"},{"label":"Modeling","permalink":"/gerardo-perrucci/blog/tags/modeling"},{"label":"Evaluation","permalink":"/gerardo-perrucci/blog/tags/evaluation"}],"readingTime":2.1,"hasTruncateMarker":false,"authors":[{"name":"Gerardo Perrucci","title":"Software Engineer","url":"https://github.com/centrodph","imageURL":"https://avatars.githubusercontent.com/u/2073951?v=4","key":"me"}],"frontMatter":{"slug":"machine-learning/machine-learning-process","title":"Machine Learning Process: A Comprehensive Guide","authors":["me"],"tags":["Machine Learning","Data Preprocessing","Modeling","Evaluation"]},"unlisted":false,"nextItem":{"title":"Machine Learning Environment: Python, R, RStudio, and Colab","permalink":"/gerardo-perrucci/blog/machine-learning/machine-learning-tools"}},"content":"Machine learning (ML) has become a cornerstone of modern technology, driving advancements in various fields such as healthcare, finance, and transportation. To build effective ML models, it\'s essential to understand the three main steps in the machine learning process: Data Preprocessing, Modeling, and Evaluation. This article breaks down these steps, detailing the sub-steps involved and providing references for further reading and understanding.\\n\\n![Machine Learning Process](./ml-process.png)\\n\\n## 1. Data Preprocessing\\n\\nData preprocessing is the first and arguably the most crucial step in the machine learning pipeline. This step ensures that the data is clean, consistent, and suitable for the modeling process.\\n\\n### Sub-steps:\\n\\n1. **Data Collection**: Gathering relevant data from various sources. This can include databases, APIs, and web scraping.\\n2. **Data Cleaning**: Removing or correcting any inaccuracies in the data, such as missing values, outliers, and duplicates.\\n3. **Data Transformation**: Converting data into a suitable format for analysis, which might involve normalization, standardization, or encoding categorical variables.\\n4. **Data Splitting**: Dividing the data into training, validation, and test sets to evaluate the model\'s performance.\\n\\n### References:\\n\\n- [Scikit-Learn Documentation on Data Preprocessing](https://scikit-learn.org/stable/modules/preprocessing.html)\\n- [Kaggle Data Preprocessing Tutorial](https://www.kaggle.com/learn/data-cleaning)\\n\\n## 2. Modeling\\n\\nOnce the data is preprocessed, the next step is to build and train the machine learning model. This involves selecting the appropriate algorithm and fine-tuning it to achieve the best performance.\\n\\n### Sub-steps:\\n\\n1. **Algorithm Selection**: Choosing a machine learning algorithm based on the problem type (e.g., regression, classification, clustering).\\n2. **Model Training**: Feeding the training data into the algorithm to learn the underlying patterns and relationships.\\n3. **Hyperparameter Tuning**: Adjusting the algorithm\'s parameters to optimize performance. This can be done using techniques like grid search or random search.\\n\\n### References:\\n\\n- [Scikit-Learn Documentation on Supervised Learning](https://scikit-learn.org/stable/supervised_learning.html)\\n- [TensorFlow Model Training Guide](https://www.tensorflow.org/guide/keras/train_and_evaluate)\\n\\n## 3. Evaluation\\n\\nEvaluation is the final step in the machine learning process, where the model\'s performance is assessed to ensure it meets the desired criteria. This involves using various metrics to measure the accuracy, precision, recall, and other relevant aspects of the model.\\n\\n### Sub-steps:\\n\\n1. **Model Validation**: Using the validation set to tune the model and prevent overfitting.\\n2. **Performance Metrics**: Calculating metrics such as accuracy, precision, recall, F1 score, and AUC-ROC to evaluate the model\'s effectiveness.\\n3. **Cross-Validation**: Implementing techniques like k-fold cross-validation to ensure the model\'s robustness and reliability.\\n\\n### References:\\n\\n- [Scikit-Learn Documentation on Model Evaluation](https://scikit-learn.org/stable/modules/model_evaluation.html)\\n- [YouTube Video on Model Evaluation Metrics](https://www.youtube.com/watch?v=85dtiMz9tSo)\\n\\nUnderstanding the machine learning process is fundamental to developing effective models that can make accurate predictions and provide valuable insights."},{"id":"machine-learning/machine-learning-tools","metadata":{"permalink":"/gerardo-perrucci/blog/machine-learning/machine-learning-tools","source":"@site/blog/machine-learning/2024-05-26-machine-learning-tools.md","title":"Machine Learning Environment: Python, R, RStudio, and Colab","description":"Hi everyone! I\'m venturing into the exciting world of machine learning (ML), and this article details the tools I\'m using to get started.","date":"2024-05-26T00:00:00.000Z","tags":[{"label":"Machine Learning","permalink":"/gerardo-perrucci/blog/tags/machine-learning"},{"label":"python","permalink":"/gerardo-perrucci/blog/tags/python"},{"label":"R","permalink":"/gerardo-perrucci/blog/tags/r"},{"label":"RStudio","permalink":"/gerardo-perrucci/blog/tags/r-studio"},{"label":"Colab","permalink":"/gerardo-perrucci/blog/tags/colab"}],"readingTime":1.33,"hasTruncateMarker":false,"authors":[{"name":"Gerardo Perrucci","title":"Software Engineer","url":"https://github.com/centrodph","imageURL":"https://avatars.githubusercontent.com/u/2073951?v=4","key":"me"}],"frontMatter":{"slug":"machine-learning/machine-learning-tools","title":"Machine Learning Environment: Python, R, RStudio, and Colab","authors":["me"],"tags":["Machine Learning","python","R","RStudio","Colab"]},"unlisted":false,"prevItem":{"title":"Machine Learning Process: A Comprehensive Guide","permalink":"/gerardo-perrucci/blog/machine-learning/machine-learning-process"},"nextItem":{"title":"New React Compiler in React 19","permalink":"/gerardo-perrucci/blog/react/new-compiler-react-19"}},"content":"Hi everyone! I\'m venturing into the exciting world of machine learning (ML), and this article details the tools I\'m using to get started.\\n\\n## Essential Software\\n\\n**Python:** As a widely used general-purpose language, Python is a popular choice for ML due to its readability, extensive libraries, and large community.\\n\\nPython download: https://www.python.org/downloads/\\n\\n**R:** Another powerful language specifically designed for statistics and data analysis. R offers a rich ecosystem of packages specifically tailored for ML tasks.\\n\\nYou can download R from the official website: https://www.r-project.org/\\n\\n**RStudio:** An integrated development environment (IDE) built specifically for R. It provides a user-friendly interface for writing, running, and managing your R code. It also offers features like code completion, syntax highlighting, and debugging tools, making your R experience smoother.\\n\\nDownload RStudio from the official website: https://www.rstudio.com/products/rstudio/\\n\\n### Cloud Platform\\n\\n**Google Colab:** This fantastic platform offered by Google allows you to run Python or R code directly within your web browser. Colab provides free access to powerful hardware with GPUs (graphical processing units) that can significantly accelerate your ML computations, especially when dealing with large datasets. It\'s a great option if you don\'t have a powerful computer or prefer a cloud-based environment.\\n\\nAccess Google Colab at: Google Colab: https://colab.research.google.com/\\n\\n### Next Steps\\n\\nI\'ll delve into exploring some popular Python libraries for machine learning, such as NumPy, pandas, scikit-learn, and TensorFlow.\\n\\nBonus Tip: Jupyter Notebook is a web-based IDE that allows you to create and share documents that contain live code, equations, visualizations, and explanatory text. It\'s a great tool for documenting your ML projects and experiments.\\n\\nYou can download Jupyter Notebook: https://jupyter.org/"},{"id":"react/new-compiler-react-19","metadata":{"permalink":"/gerardo-perrucci/blog/react/new-compiler-react-19","source":"@site/blog/react/2024-05-26-new-compiler-react-19.mdx","title":"New React Compiler in React 19","description":"The new React compiler introduced in React 19 it will significantly improve React development.","date":"2024-05-26T00:00:00.000Z","tags":[{"label":"React","permalink":"/gerardo-perrucci/blog/tags/react"},{"label":"Compiler","permalink":"/gerardo-perrucci/blog/tags/compiler"},{"label":"React 19","permalink":"/gerardo-perrucci/blog/tags/react-19"}],"readingTime":1.77,"hasTruncateMarker":false,"authors":[{"name":"Gerardo Perrucci","title":"Software Engineer","url":"https://github.com/centrodph","imageURL":"https://avatars.githubusercontent.com/u/2073951?v=4","key":"me"}],"frontMatter":{"slug":"react/new-compiler-react-19","title":"New React Compiler in React 19","authors":["me"],"tags":["React","Compiler","React 19"]},"unlisted":false,"prevItem":{"title":"Machine Learning Environment: Python, R, RStudio, and Colab","permalink":"/gerardo-perrucci/blog/machine-learning/machine-learning-tools"}},"content":"**The new React compiler introduced in React 19 it will significantly improve React development.**\\n\\nReact\'s new compiler is an innovative tool designed to automatically optimize your React applications. By deeply understanding your code, the compiler applies optimizations grounded in React\u2019s core principles. These optimizations can lead to significant performance enhancements, especially for complex applications.\\n\\nCurrently in its experimental phase, the new compiler has the potential to revolutionize React development. It\'s particularly interesting to see how it will interact with the `inline` optimization technique used in React like memo, useMemo useCallback.\\n\\nThe ongoing development and integration of the compiler promise exciting advancements in the efficiency and performance of React applications. As the tool matures, it could become a game-changer for developers seeking to build faster, more efficient applications.\\n\\nSome bullet points to consider:\\n\\n    - A new experimental tool called the React compiler can automatically optimize your React application.\\n\\n    - It accomplishes this by thoroughly comprehending the code and applying optimizations based on React\'s principles.\\n\\n    - This can result in performance improvements, particularly for intricate applications.\\n\\n    - The compiler is still in its experimental phase, but it has the potential to revolutionize React development.\\n\\n    - It will be interesting to see how it affects the `inline` optimization technique used in React like memo, useMemo useCallback.\\n\\nSure, according to the document (https://react.dev/learn/react-compiler), the React compiler can optimize your React application in a few specific cases.\\n\\n**It can automatically memoize certain values or groups of values within your components and hooks.** This means it can cache the results of functions so that they don\'t have to be recalculated every time the component renders if the inputs haven\'t changed.\\n\\nIn addition, the compiler can skip over re-rendering components that haven\'t changed. For instance, if a parent component re-renders, it won\'t necessarily force all of its child components to re-render as well. Finally, is important to note that the code is expected to follow the **React Rules** in order to work properly with the compiler. Learn more about the React Rules: https://react.dev/reference/rules\\n\\n<iframe\\n  width=\\"560\\"\\n  height=\\"315\\"\\n  src=\\"https://www.youtube.com/embed/Xo-ddmNGjY8?si=EfLo6F1IM1O7PUll\\"\\n  title=\\"YouTube video player\\"\\n  frameborder=\\"0\\"\\n  allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\"\\n  referrerpolicy=\\"strict-origin-when-cross-origin\\"\\n  allowfullscreen\\n></iframe>"}]}}')}}]);